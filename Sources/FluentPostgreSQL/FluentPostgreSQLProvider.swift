import Async
import Service

/// Adds Fluent PostgreSQL's services to your project.
public final class FluentPostgreSQLProvider: Provider {
    /// See `Provider.repositoryName`
    public static let repositoryName = "fluent-postgresql"

    /// Creates a new `FluentPostgreSQLProvider`
    ///
    /// - enableIdentityColumns: If true, `GENERATED BY DEFAULT AS IDENTITY` will be used.
    ///                          `true` by default.
    public init(enableIdentityColumns: Bool? = nil) {
        if let enableIdentityColumns = enableIdentityColumns {
            _globalEnableIdentityColumns = enableIdentityColumns
        }
    }

    /// See `Provider.register(_:)`
    public func register(_ services: inout Services) throws {
        try services.register(FluentProvider())
        try services.register(PostgreSQLProvider())
    }

    /// See `Provider.boot(_:)`
    public func willBoot(_ worker: Container) throws -> Future<Void> {
        return worker.withConnection(to: .psql) { conn in
            return conn.simpleQuery("SELECT current_setting('server_version') as version").map(to: Void.self) { rows in
                _serverVersion = try rows[0].firstValue(forColumn: "version")!.decode(String.self)
                if let versionString = _serverVersion {
                    let pointIndex = versionString.index(of: ".") ?? versionString.endIndex
                    let majorVersion = versionString[..<pointIndex]
                    if let ver = Int(majorVersion) {
                        _globalEnableIdentityColumns = ver < 10 ? false: _globalEnableIdentityColumns
                    }
                }
            }
        }
    }

    /// See `Provider.boot(_:)`
    public func didBoot(_ worker: Container) throws -> Future<Void> {
        return worker.withConnection(to: .psql) { conn in
            return conn.simpleQuery("select * from pg_class").map(to: Void.self) { rows in
                print(rows)
            }
        }
    }
}

/// server version string
internal var _serverVersion: String?
/// Enabled by default
internal var _globalEnableIdentityColumns: Bool = true
