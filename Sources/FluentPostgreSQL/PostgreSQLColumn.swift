/// A PostgreSQL column type and size.
public struct PostgreSQLColumnType {
    /// The column's name
    public var dataType: DataDefinitionDataType
    
    /// An internal method of creating the column
    public init(name: String, parameters: [String] = [], attributes: [String] = ["NOT NULL"]) {
        self.dataType = .init(name: name, parameters: parameters, attributes: attributes)
    }
    
    /// Adds primary key attributes.
    mutating func addPrimaryKeyAttributes() {
        if dataType.name.contains("INT") {
            if _globalEnableIdentityColumns {
                dataType.attributes.append("GENERATED BY DEFAULT AS IDENTITY")
            } else {
                dataType.name = dataType.name.replacingOccurrences(of: "INT", with: "SERIAL")
            }
        }
        dataType.attributes.append("PRIMARY KEY")
    }
}

/// MARK: Representable

/// Capable of being represented statically by a `PostgreSQLColumn`
public protocol PostgreSQLColumnStaticRepresentable {
    /// The `PostgreSQLColumn` type that best represents this type.
    static var postgreSQLColumn: PostgreSQLColumnType { get }
}


extension Optional: PostgreSQLColumnStaticRepresentable {
    /// See `PostgreSQLColumnStaticRepresentable`.
    public static var postgreSQLColumn: PostgreSQLColumnType {
        guard let wrapped = Wrapped.self as? PostgreSQLColumnStaticRepresentable.Type else {
            fatalError("\(Wrapped.self) is not PostgreSQLColumnStaticRepresentable")
        }
        var dataType = wrapped.postgreSQLColumn
        dataType.dataType.attributes = dataType.dataType.attributes.filter { $0 != "NOT NULL" }
        return dataType
    }
}
